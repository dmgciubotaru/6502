SYMBOLS 
{
    # Define the stack size for the application
    __STACKSIZE__:   type = weak, value = $0200;
}

MEMORY
{
	ZP:		start = $0000, size = $0100, type = rw, file = "";
    STACK:  start = $0100, size = $0100, type = rw, file = "";
	RAM: 	start = $0200, size = $3E00, type = rw, file = "", define = yes;
	ROM: 	start = $8000, size = $8000, type = ro, file = "%O";
}

SEGMENTS 
{
    ZEROPAGE: 	load = ZP,  			type = zp;
	DATA:   	load = ROM, run = RAM, 	type = rw, 	define = yes;
	BSS:    	load = RAM, 			type = bss, define = yes;
	HEAP:     	load = RAM, 			type = bss, optional = yes;
	STARTUP:  	load = ROM, 			type = ro;
    ONCE:     	load = ROM, 			type = ro,  optional = yes;
	CODE:   	load = ROM, 			type = ro;
	RODATA: 	load = ROM, 			type = ro;
	VECTORS: 	load = ROM, 			type = ro, 	start = $FFFA;
}

FEATURES 
{
    CONDES: segment = RODATA,
			type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
			type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
			type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            import  = __CALLIRQ__;
}
